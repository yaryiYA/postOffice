plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'

}

group = 'com.example'
version = '0.1.0'


java {
    sourceCompatibility = '17'
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    implementation "org.mapstruct:mapstruct:1.4.2.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"


    runtimeOnly 'org.postgresql:postgresql'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/example/postoffice/dto/*",
                    "com/example/postoffice/mapper/*",
                    "com/example/postoffice/entity/*",
                    "com/example/postoffice/repository/*",
                    "com/example/postoffice/exception/*",
                    "com/example/postoffice/PostOfficeApplication.class",
                    "com/example/postoffice/controller/rest/BaseController.class"
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.8"
}
